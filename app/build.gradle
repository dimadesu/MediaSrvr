apply plugin: 'com.android.application'

android {
    namespace 'com.yourorg.sample'
    compileSdkVersion 33
    ndkVersion "25.2.9519653"
    buildToolsVersion "33.0.2"
    defaultConfig {
        applicationId "com.yourorg.sample"
    minSdkVersion 21
    targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Configure external native build only if prebuilt libnode binaries (libnode.so) are present
        def libnodeSoExists = fileTree(dir: "${projectDir}/libnode/bin", include: '**/libnode.so').files.size() > 0
        if (libnodeSoExists) {
            externalNativeBuild {
                cmake {
                    cppFlags ""
                    arguments "-DANDROID_STL=c++_shared"
                }
            }
        } else {
            // Informative message during configuration; to enable native build, download and copy libnode/bin as described in README.md
            println "libnode prebuilt binaries not found in ${projectDir}/libnode/bin — skipping externalNativeBuild configuration."
        }
        // Configure ABI filters dynamically based on available prebuilt libnode binaries
        def availableAbis = []
        def libnodeBinDir = file("${projectDir}/libnode/bin")
        if (libnodeBinDir.exists()) {
            libnodeBinDir.eachDir { dir ->
                def candidate = new File(dir, 'libnode.so')
                if (candidate.exists()) {
                    availableAbis << dir.name
                }
            }
        }
        ndk {
            if (availableAbis.size() > 0) {
                // abiFilters accepts varargs; convert list to String[] explicitly
                abiFilters availableAbis.toArray(new String[0])
            } else {
                // Fall back to common ABIs if no prebuilt binaries found
                abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    // Use modern Java compatibility to avoid obsolete source/target warnings
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    // Configure CMake externally only when libnode binaries exist (see above)
    if (fileTree(dir: "${projectDir}/libnode/bin", include: '**/libnode.so').files.size() > 0) {
        externalNativeBuild {
            cmake {
                path "CMakeLists.txt"
            }
        }
    }

    // If you want Gradle to package prebuilt native libraries
    // with your APK, modify the default source set configuration
    // to include the directory of your prebuilt .so files as follows.
    sourceSets {
        main {
            if (fileTree(dir: "${projectDir}/libnode/bin", include: '**/libnode.so').files.size() > 0) {
                jniLibs.srcDirs 'libnode/bin/'
            } else {
                // No prebuilt libs present — jniLibs not configured
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.5.1') {
        exclude group: 'androidx.annotation', module: 'annotation'
    }
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
}
